In C, arrays are passed by reference, not by value. This means that when you pass an array as an argument to a function, the function receives a pointer to the first element of the array, not a copy of the array. Therefore, any changes made to the array inside the function will also affect the original array in the calling function.

To pass an array by value, you can create a copy of the array and pass the copy to the function. Here's an example:


#include <stdio.h>

void doubleArrayValues(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        arr[i] *= 2; // modify the original array
    }
}

int main() {
    int arr[5] = {1, 2, 3, 4, 5};

    // create a copy of the array
    int arrCopy[5];
    for (int i = 0; i < 5; i++) {
        arrCopy[i] = arr[i];
    }

    // pass the copy of the array to the function
    doubleArrayValues(arrCopy, 5);

    // print the original array
    for (int i = 0; i < 5; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

In this example, the doubleArrayValues function takes a pointer to the first element of an array and modifies its values. In the main function, we create a copy of the array using a loop, and then pass the copy to the doubleArrayValues function. This way, any changes made to the array inside the function will not affect the original array.